<?php
/**
 * OrderPrice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Grab\GrabfoodApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Grab\GrabfoodApiSdk\Model;

use \ArrayAccess;
use \Grab\GrabfoodApiSdk\ObjectSerializer;

/**
 * OrderPrice Class Doc Comment
 *
 * @category Class
 * @description A JSON object containing order&#39;s price in the minor unit format.
 * @package  Grab\GrabfoodApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderPrice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'orderPrice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subtotal' => 'int',
        'tax' => 'int',
        'merchant_charge_fee' => 'int',
        'grab_fund_promo' => 'int',
        'merchant_fund_promo' => 'int',
        'basket_promo' => 'int',
        'delivery_fee' => 'int',
        'small_order_fee' => 'int',
        'eater_payment' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subtotal' => 'int64',
        'tax' => 'int64',
        'merchant_charge_fee' => 'int64',
        'grab_fund_promo' => 'int64',
        'merchant_fund_promo' => 'int64',
        'basket_promo' => 'int64',
        'delivery_fee' => 'int64',
        'small_order_fee' => 'int64',
        'eater_payment' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subtotal' => false,
        'tax' => false,
        'merchant_charge_fee' => false,
        'grab_fund_promo' => false,
        'merchant_fund_promo' => false,
        'basket_promo' => false,
        'delivery_fee' => false,
        'small_order_fee' => false,
        'eater_payment' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subtotal' => 'subtotal',
        'tax' => 'tax',
        'merchant_charge_fee' => 'merchantChargeFee',
        'grab_fund_promo' => 'grabFundPromo',
        'merchant_fund_promo' => 'merchantFundPromo',
        'basket_promo' => 'basketPromo',
        'delivery_fee' => 'deliveryFee',
        'small_order_fee' => 'smallOrderFee',
        'eater_payment' => 'eaterPayment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subtotal' => 'setSubtotal',
        'tax' => 'setTax',
        'merchant_charge_fee' => 'setMerchantChargeFee',
        'grab_fund_promo' => 'setGrabFundPromo',
        'merchant_fund_promo' => 'setMerchantFundPromo',
        'basket_promo' => 'setBasketPromo',
        'delivery_fee' => 'setDeliveryFee',
        'small_order_fee' => 'setSmallOrderFee',
        'eater_payment' => 'setEaterPayment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subtotal' => 'getSubtotal',
        'tax' => 'getTax',
        'merchant_charge_fee' => 'getMerchantChargeFee',
        'grab_fund_promo' => 'getGrabFundPromo',
        'merchant_fund_promo' => 'getMerchantFundPromo',
        'basket_promo' => 'getBasketPromo',
        'delivery_fee' => 'getDeliveryFee',
        'small_order_fee' => 'getSmallOrderFee',
        'eater_payment' => 'getEaterPayment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('subtotal', $data ?? [], null);
        $this->setIfExists('tax', $data ?? [], null);
        $this->setIfExists('merchant_charge_fee', $data ?? [], null);
        $this->setIfExists('grab_fund_promo', $data ?? [], null);
        $this->setIfExists('merchant_fund_promo', $data ?? [], null);
        $this->setIfExists('basket_promo', $data ?? [], null);
        $this->setIfExists('delivery_fee', $data ?? [], null);
        $this->setIfExists('small_order_fee', $data ?? [], null);
        $this->setIfExists('eater_payment', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subtotal'] === null) {
            $invalidProperties[] = "'subtotal' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subtotal
     *
     * @return int
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param int $subtotal Total item and modifier price (tax-inclusive) in the minor unit. ``` subtotal = Sum of all (item price * quantity) | 2550*1=2550
     *
     * @return self
     */
    public function setSubtotal($subtotal)
    {
        if (is_null($subtotal)) {
            throw new \InvalidArgumentException('non-nullable subtotal cannot be null');
        }
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return int|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param int|null $tax GrabFood's tax in the minor unit. Refer to FAQs for more details about [tax](#section/Order/How-is-tax-calculated). ``` tax = (subtotal + merchantChargeFee - merchantFundPromo) * Tax / (1+Tax) | (2550-475)*0.06/1.06=117
     *
     * @return self
     */
    public function setTax($tax)
    {
        if (is_null($tax)) {
            throw new \InvalidArgumentException('non-nullable tax cannot be null');
        }
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets merchant_charge_fee
     *
     * @return int|null
     */
    public function getMerchantChargeFee()
    {
        return $this->container['merchant_charge_fee'];
    }

    /**
     * Sets merchant_charge_fee
     *
     * @param int|null $merchant_charge_fee Any additional fee charged by merchant (tax-inclusive), which is 100% paid out to the merchant. Eg. Takeaway, packaging costs, dine-in charge.
     *
     * @return self
     */
    public function setMerchantChargeFee($merchant_charge_fee)
    {
        if (is_null($merchant_charge_fee)) {
            throw new \InvalidArgumentException('non-nullable merchant_charge_fee cannot be null');
        }
        $this->container['merchant_charge_fee'] = $merchant_charge_fee;

        return $this;
    }

    /**
     * Gets grab_fund_promo
     *
     * @return int|null
     */
    public function getGrabFundPromo()
    {
        return $this->container['grab_fund_promo'];
    }

    /**
     * Sets grab_fund_promo
     *
     * @param int|null $grab_fund_promo GrabFood's promo fund in the minor unit. Calculated based on funded ratio. Only present when `paymentType:CASH` or `orderType:DeliveredByRestaurant`. Otherwise, it will be set to `0`.
     *
     * @return self
     */
    public function setGrabFundPromo($grab_fund_promo)
    {
        if (is_null($grab_fund_promo)) {
            throw new \InvalidArgumentException('non-nullable grab_fund_promo cannot be null');
        }
        $this->container['grab_fund_promo'] = $grab_fund_promo;

        return $this;
    }

    /**
     * Gets merchant_fund_promo
     *
     * @return int|null
     */
    public function getMerchantFundPromo()
    {
        return $this->container['merchant_fund_promo'];
    }

    /**
     * Sets merchant_fund_promo
     *
     * @param int|null $merchant_fund_promo The merchant's promo fund in the minor unit. Calculated based on funded ratio.
     *
     * @return self
     */
    public function setMerchantFundPromo($merchant_fund_promo)
    {
        if (is_null($merchant_fund_promo)) {
            throw new \InvalidArgumentException('non-nullable merchant_fund_promo cannot be null');
        }
        $this->container['merchant_fund_promo'] = $merchant_fund_promo;

        return $this;
    }

    /**
     * Gets basket_promo
     *
     * @return int|null
     */
    public function getBasketPromo()
    {
        return $this->container['basket_promo'];
    }

    /**
     * Sets basket_promo
     *
     * @param int|null $basket_promo The total amount promo applied to the basket items only (item level/order level) in the minor unit, excluding delivery fee. Only present when `paymentType: CASH` or `orderType: DeliveredByRestaurant`. Otherwise, it will be set to `0`.  ``` basketPromo = (grabFundPromo + merchantFundPromo) | 300 + 475 = 775
     *
     * @return self
     */
    public function setBasketPromo($basket_promo)
    {
        if (is_null($basket_promo)) {
            throw new \InvalidArgumentException('non-nullable basket_promo cannot be null');
        }
        $this->container['basket_promo'] = $basket_promo;

        return $this;
    }

    /**
     * Gets delivery_fee
     *
     * @return int|null
     */
    public function getDeliveryFee()
    {
        return $this->container['delivery_fee'];
    }

    /**
     * Sets delivery_fee
     *
     * @param int|null $delivery_fee The delivery fee in the minor unit. Only present when `paymentType:CASH` or `orderType:DeliveredByRestaurant`. Otherwise, it will be set to `0`.
     *
     * @return self
     */
    public function setDeliveryFee($delivery_fee)
    {
        if (is_null($delivery_fee)) {
            throw new \InvalidArgumentException('non-nullable delivery_fee cannot be null');
        }
        $this->container['delivery_fee'] = $delivery_fee;

        return $this;
    }

    /**
     * Gets small_order_fee
     *
     * @return int|null
     */
    public function getSmallOrderFee()
    {
        return $this->container['small_order_fee'];
    }

    /**
     * Sets small_order_fee
     *
     * @param int|null $small_order_fee The fee charged by GrabFood for order that does not meet a certain minimum order value. Only present when `paymentType:CASH` and `orderType:DeliveredByRestaurant`.
     *
     * @return self
     */
    public function setSmallOrderFee($small_order_fee)
    {
        if (is_null($small_order_fee)) {
            throw new \InvalidArgumentException('non-nullable small_order_fee cannot be null');
        }
        $this->container['small_order_fee'] = $small_order_fee;

        return $this;
    }

    /**
     * Gets eater_payment
     *
     * @return int|null
     */
    public function getEaterPayment()
    {
        return $this->container['eater_payment'];
    }

    /**
     * Sets eater_payment
     *
     * @param int|null $eater_payment The total amount paid by the consumer in the minor unit, excluding some additional fees charged by GrabFood. Only present when `paymentType:CASH` or `orderType:DeliveredByRestaurant`. Otherwise, it will be set to `0`.  ``` eaterPayment = (subtotal + merchantChargeFee + deliveryFee) - (sum of all promo) | (2550+400)-775=2175
     *
     * @return self
     */
    public function setEaterPayment($eater_payment)
    {
        if (is_null($eater_payment)) {
            throw new \InvalidArgumentException('non-nullable eater_payment cannot be null');
        }
        $this->container['eater_payment'] = $eater_payment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


