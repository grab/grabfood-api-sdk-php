<?php
/**
 * OrderCampaign
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Grab\GrabfoodApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Grab\GrabfoodApiSdk\Model;

use \ArrayAccess;
use \Grab\GrabfoodApiSdk\ObjectSerializer;

/**
 * OrderCampaign Class Doc Comment
 *
 * @category Class
 * @package  Grab\GrabfoodApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OrderCampaign implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrderCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'campaign_name_for_mex' => 'string',
        'level' => 'string',
        'type' => 'string',
        'usage_count' => 'int',
        'mex_funded_ratio' => 'int',
        'deducted_amount' => 'int',
        'deducted_part' => 'string',
        'applied_item_ids' => 'string[]',
        'free_item' => '\Grab\GrabfoodApiSdk\Model\OrderFreeItem'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'campaign_name_for_mex' => null,
        'level' => null,
        'type' => null,
        'usage_count' => 'int64',
        'mex_funded_ratio' => null,
        'deducted_amount' => 'int64',
        'deducted_part' => null,
        'applied_item_ids' => null,
        'free_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'campaign_name_for_mex' => false,
        'level' => false,
        'type' => false,
        'usage_count' => false,
        'mex_funded_ratio' => false,
        'deducted_amount' => false,
        'deducted_part' => false,
        'applied_item_ids' => true,
        'free_item' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'campaign_name_for_mex' => 'campaignNameForMex',
        'level' => 'level',
        'type' => 'type',
        'usage_count' => 'usageCount',
        'mex_funded_ratio' => 'mexFundedRatio',
        'deducted_amount' => 'deductedAmount',
        'deducted_part' => 'deductedPart',
        'applied_item_ids' => 'appliedItemIDs',
        'free_item' => 'freeItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'campaign_name_for_mex' => 'setCampaignNameForMex',
        'level' => 'setLevel',
        'type' => 'setType',
        'usage_count' => 'setUsageCount',
        'mex_funded_ratio' => 'setMexFundedRatio',
        'deducted_amount' => 'setDeductedAmount',
        'deducted_part' => 'setDeductedPart',
        'applied_item_ids' => 'setAppliedItemIds',
        'free_item' => 'setFreeItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'campaign_name_for_mex' => 'getCampaignNameForMex',
        'level' => 'getLevel',
        'type' => 'getType',
        'usage_count' => 'getUsageCount',
        'mex_funded_ratio' => 'getMexFundedRatio',
        'deducted_amount' => 'getDeductedAmount',
        'deducted_part' => 'getDeductedPart',
        'applied_item_ids' => 'getAppliedItemIds',
        'free_item' => 'getFreeItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LEVEL_ITEM = 'item';
    public const LEVEL_CATEGORY = 'category';
    public const LEVEL_ORDER = 'order';
    public const LEVEL_DELIVERY_FEE = 'delivery_fee';
    public const LEVEL_BUNDLE = 'bundle';
    public const LEVEL_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const TYPE_PERCENTAGE = 'percentage';
    public const TYPE_NET = 'net';
    public const TYPE_DELIVERY = 'delivery';
    public const TYPE_FREE_ITEM = 'freeItem';
    public const TYPE_BUNDLE_SAME_NET = 'bundleSameNet';
    public const TYPE_BUNDLE_SAME_PERCENTAGE = 'bundleSamePercentage';
    public const TYPE_BUNDLE_SAME_FIX_PRICE = 'bundleSameFixPrice';
    public const TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';
    public const DEDUCTED_PART_BASKET_AMOUNT = 'basket_amount';
    public const DEDUCTED_PART_DELIVERY_FEE = 'delivery_fee';
    public const DEDUCTED_PART_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLevelAllowableValues()
    {
        return [
            self::LEVEL_ITEM,
            self::LEVEL_CATEGORY,
            self::LEVEL_ORDER,
            self::LEVEL_DELIVERY_FEE,
            self::LEVEL_BUNDLE,
            self::LEVEL_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PERCENTAGE,
            self::TYPE_NET,
            self::TYPE_DELIVERY,
            self::TYPE_FREE_ITEM,
            self::TYPE_BUNDLE_SAME_NET,
            self::TYPE_BUNDLE_SAME_PERCENTAGE,
            self::TYPE_BUNDLE_SAME_FIX_PRICE,
            self::TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeductedPartAllowableValues()
    {
        return [
            self::DEDUCTED_PART_BASKET_AMOUNT,
            self::DEDUCTED_PART_DELIVERY_FEE,
            self::DEDUCTED_PART_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('campaign_name_for_mex', $data ?? [], null);
        $this->setIfExists('level', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('usage_count', $data ?? [], null);
        $this->setIfExists('mex_funded_ratio', $data ?? [], null);
        $this->setIfExists('deducted_amount', $data ?? [], null);
        $this->setIfExists('deducted_part', $data ?? [], null);
        $this->setIfExists('applied_item_ids', $data ?? [], null);
        $this->setIfExists('free_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && (mb_strlen($this->container['id']) > 64)) {
            $invalidProperties[] = "invalid value for 'id', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 60)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 60.";
        }

        $allowedValues = $this->getLevelAllowableValues();
        if (!is_null($this->container['level']) && !in_array($this->container['level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'level', must be one of '%s'",
                $this->container['level'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDeductedPartAllowableValues();
        if (!is_null($this->container['deducted_part']) && !in_array($this->container['deducted_part'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'deducted_part', must be one of '%s'",
                $this->container['deducted_part'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The campaign's ID returned by GrabFood upon campaign creation.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        if ((mb_strlen($id) > 64)) {
            throw new \InvalidArgumentException('invalid length for $id when calling OrderCampaign., must be smaller than or equal to 64.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the campaign. This campaign name has been automatically generated by Grab for display in the customer app.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $name when calling OrderCampaign., must be smaller than or equal to 60.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets campaign_name_for_mex
     *
     * @return string|null
     */
    public function getCampaignNameForMex()
    {
        return $this->container['campaign_name_for_mex'];
    }

    /**
     * Sets campaign_name_for_mex
     *
     * @param string|null $campaign_name_for_mex The campaign name provided by the merchant in [Create Campaign](#tag/create-campaign). Whitelist required, reach out to your integration manager.
     *
     * @return self
     */
    public function setCampaignNameForMex($campaign_name_for_mex)
    {
        if (is_null($campaign_name_for_mex)) {
            throw new \InvalidArgumentException('non-nullable campaign_name_for_mex cannot be null');
        }
        $this->container['campaign_name_for_mex'] = $campaign_name_for_mex;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string|null
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string|null $level The campaign level.
     *
     * @return self
     */
    public function setLevel($level)
    {
        if (is_null($level)) {
            throw new \InvalidArgumentException('non-nullable level cannot be null');
        }
        $allowedValues = $this->getLevelAllowableValues();
        if (!in_array($level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'level', must be one of '%s'",
                    $level,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type The type of campaign.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets usage_count
     *
     * @return int|null
     */
    public function getUsageCount()
    {
        return $this->container['usage_count'];
    }

    /**
     * Sets usage_count
     *
     * @param int|null $usage_count The redemption count of same campaign in this order.
     *
     * @return self
     */
    public function setUsageCount($usage_count)
    {
        if (is_null($usage_count)) {
            throw new \InvalidArgumentException('non-nullable usage_count cannot be null');
        }
        $this->container['usage_count'] = $usage_count;

        return $this;
    }

    /**
     * Gets mex_funded_ratio
     *
     * @return int|null
     */
    public function getMexFundedRatio()
    {
        return $this->container['mex_funded_ratio'];
    }

    /**
     * Sets mex_funded_ratio
     *
     * @param int|null $mex_funded_ratio The ratio funded by the merchant in percentage.
     *
     * @return self
     */
    public function setMexFundedRatio($mex_funded_ratio)
    {
        if (is_null($mex_funded_ratio)) {
            throw new \InvalidArgumentException('non-nullable mex_funded_ratio cannot be null');
        }
        $this->container['mex_funded_ratio'] = $mex_funded_ratio;

        return $this;
    }

    /**
     * Gets deducted_amount
     *
     * @return int|null
     */
    public function getDeductedAmount()
    {
        return $this->container['deducted_amount'];
    }

    /**
     * Sets deducted_amount
     *
     * @param int|null $deducted_amount The total discount amount in minor unit format applied to the order based on the campaign's usage count. The amount is rounded to the nearest value for `VND`, `IDR`, and `THB`, as decimals are not supported.  ``` deductedAmount = Item price(tax inclusive) * 20% discount | 2375*0.2=475
     *
     * @return self
     */
    public function setDeductedAmount($deducted_amount)
    {
        if (is_null($deducted_amount)) {
            throw new \InvalidArgumentException('non-nullable deducted_amount cannot be null');
        }
        $this->container['deducted_amount'] = $deducted_amount;

        return $this;
    }

    /**
     * Gets deducted_part
     *
     * @return string|null
     */
    public function getDeductedPart()
    {
        return $this->container['deducted_part'];
    }

    /**
     * Sets deducted_part
     *
     * @param string|null $deducted_part The part that the campaign is applied.
     *
     * @return self
     */
    public function setDeductedPart($deducted_part)
    {
        if (is_null($deducted_part)) {
            throw new \InvalidArgumentException('non-nullable deducted_part cannot be null');
        }
        $allowedValues = $this->getDeductedPartAllowableValues();
        if (!in_array($deducted_part, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'deducted_part', must be one of '%s'",
                    $deducted_part,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['deducted_part'] = $deducted_part;

        return $this;
    }

    /**
     * Gets applied_item_ids
     *
     * @return string[]|null
     */
    public function getAppliedItemIds()
    {
        return $this->container['applied_item_ids'];
    }

    /**
     * Sets applied_item_ids
     *
     * @param string[]|null $applied_item_ids An array of item IDs that get discount under this campaign. `null` if no item applied in this campaign.
     *
     * @return self
     */
    public function setAppliedItemIds($applied_item_ids)
    {
        if (is_null($applied_item_ids)) {
            array_push($this->openAPINullablesSetToNull, 'applied_item_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('applied_item_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['applied_item_ids'] = $applied_item_ids;

        return $this;
    }

    /**
     * Gets free_item
     *
     * @return \Grab\GrabfoodApiSdk\Model\OrderFreeItem|null
     */
    public function getFreeItem()
    {
        return $this->container['free_item'];
    }

    /**
     * Sets free_item
     *
     * @param \Grab\GrabfoodApiSdk\Model\OrderFreeItem|null $free_item free_item
     *
     * @return self
     */
    public function setFreeItem($free_item)
    {
        if (is_null($free_item)) {
            throw new \InvalidArgumentException('non-nullable free_item cannot be null');
        }
        $this->container['free_item'] = $free_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


