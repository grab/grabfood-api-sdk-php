<?php
/**
 * CheckOrderCancelableResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Grab\GrabfoodApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Grab\GrabfoodApiSdk\Model;

use \ArrayAccess;
use \Grab\GrabfoodApiSdk\ObjectSerializer;

/**
 * CheckOrderCancelableResponse Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Grab\GrabfoodApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckOrderCancelableResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckOrderCancelableResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cancel_able' => 'bool',
        'non_cancellation_reason' => 'string',
        'limit_type' => '\Grab\GrabfoodApiSdk\Model\CancelOrderLimitType',
        'limit_times' => 'int',
        'cancel_reasons' => '\Grab\GrabfoodApiSdk\Model\CancelReason[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cancel_able' => null,
        'non_cancellation_reason' => null,
        'limit_type' => null,
        'limit_times' => 'int64',
        'cancel_reasons' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cancel_able' => false,
        'non_cancellation_reason' => false,
        'limit_type' => false,
        'limit_times' => false,
        'cancel_reasons' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cancel_able' => 'cancelAble',
        'non_cancellation_reason' => 'nonCancellationReason',
        'limit_type' => 'limitType',
        'limit_times' => 'limitTimes',
        'cancel_reasons' => 'cancelReasons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cancel_able' => 'setCancelAble',
        'non_cancellation_reason' => 'setNonCancellationReason',
        'limit_type' => 'setLimitType',
        'limit_times' => 'setLimitTimes',
        'cancel_reasons' => 'setCancelReasons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cancel_able' => 'getCancelAble',
        'non_cancellation_reason' => 'getNonCancellationReason',
        'limit_type' => 'getLimitType',
        'limit_times' => 'getLimitTimes',
        'cancel_reasons' => 'getCancelReasons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const NON_CANCELLATION_REASON_GKMM__GRAB_KITCHEN_MIX__MATCH_ORDERS_CANNOT_BE_CANCELLED = 'GKMM (Grab Kitchen Mix & Match) orders cannot be cancelled';
    public const NON_CANCELLATION_REASON_SELF_PICK_UP_ORDERS_CANNOT_BE_CANCELLED = 'Self pick-up orders cannot be cancelled';
    public const NON_CANCELLATION_REASON_SCHEDULED_ORDERS_CANNOT_BE_CANCELLED = 'Scheduled orders cannot be cancelled';
    public const NON_CANCELLATION_REASON_DAILY_CANCELLATION_LIMIT_REACHED = 'Daily cancellation limit reached';
    public const NON_CANCELLATION_REASON_WEEKLY_CANCELLATION_LIMIT_REACHED = 'Weekly cancellation limit reached';
    public const NON_CANCELLATION_REASON_MONTHLY_CANCELLATION_LIMIT_REACHED = 'Monthly cancellation limit reached';
    public const NON_CANCELLATION_REASON_DRIVER_HAS_BEEN_ALLOCATED_FOR_TOO_LONG = 'Driver has been allocated for too long';
    public const NON_CANCELLATION_REASON_DRIVER_APP_VERSION_IS_OUTDATED_PREVENTING_CANCELLATION = 'Driver App version is outdated preventing cancellation';
    public const NON_CANCELLATION_REASON_ORDER_HAS_NOT_YET_BEEN_ALLOCATED_PREVENTING_CANCELLATION = 'Order has not yet been allocated preventing cancellation';
    public const NON_CANCELLATION_REASON_THE_CURRENT_STATUS_OF_THE_ORDER_DOES_NOT_ALLOW_CANCELLATION = 'The current status of the order does not allow cancellation';
    public const NON_CANCELLATION_REASON_DEFAULT_ERROR = 'Default Error';
    public const NON_CANCELLATION_REASON_EMPTY = '';
    public const NON_CANCELLATION_REASON_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNonCancellationReasonAllowableValues()
    {
        return [
            self::NON_CANCELLATION_REASON_GKMM__GRAB_KITCHEN_MIX__MATCH_ORDERS_CANNOT_BE_CANCELLED,
            self::NON_CANCELLATION_REASON_SELF_PICK_UP_ORDERS_CANNOT_BE_CANCELLED,
            self::NON_CANCELLATION_REASON_SCHEDULED_ORDERS_CANNOT_BE_CANCELLED,
            self::NON_CANCELLATION_REASON_DAILY_CANCELLATION_LIMIT_REACHED,
            self::NON_CANCELLATION_REASON_WEEKLY_CANCELLATION_LIMIT_REACHED,
            self::NON_CANCELLATION_REASON_MONTHLY_CANCELLATION_LIMIT_REACHED,
            self::NON_CANCELLATION_REASON_DRIVER_HAS_BEEN_ALLOCATED_FOR_TOO_LONG,
            self::NON_CANCELLATION_REASON_DRIVER_APP_VERSION_IS_OUTDATED_PREVENTING_CANCELLATION,
            self::NON_CANCELLATION_REASON_ORDER_HAS_NOT_YET_BEEN_ALLOCATED_PREVENTING_CANCELLATION,
            self::NON_CANCELLATION_REASON_THE_CURRENT_STATUS_OF_THE_ORDER_DOES_NOT_ALLOW_CANCELLATION,
            self::NON_CANCELLATION_REASON_DEFAULT_ERROR,
            self::NON_CANCELLATION_REASON_EMPTY,
            self::NON_CANCELLATION_REASON_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cancel_able', $data ?? [], null);
        $this->setIfExists('non_cancellation_reason', $data ?? [], null);
        $this->setIfExists('limit_type', $data ?? [], null);
        $this->setIfExists('limit_times', $data ?? [], null);
        $this->setIfExists('cancel_reasons', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNonCancellationReasonAllowableValues();
        if (!is_null($this->container['non_cancellation_reason']) && !in_array($this->container['non_cancellation_reason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'non_cancellation_reason', must be one of '%s'",
                $this->container['non_cancellation_reason'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cancel_able
     *
     * @return bool|null
     */
    public function getCancelAble()
    {
        return $this->container['cancel_able'];
    }

    /**
     * Sets cancel_able
     *
     * @param bool|null $cancel_able The boolean value to indicate whether an order can be cancelled.
     *
     * @return self
     */
    public function setCancelAble($cancel_able)
    {
        if (is_null($cancel_able)) {
            throw new \InvalidArgumentException('non-nullable cancel_able cannot be null');
        }
        $this->container['cancel_able'] = $cancel_able;

        return $this;
    }

    /**
     * Gets non_cancellation_reason
     *
     * @return string|null
     */
    public function getNonCancellationReason()
    {
        return $this->container['non_cancellation_reason'];
    }

    /**
     * Sets non_cancellation_reason
     *
     * @param string|null $non_cancellation_reason The reason for the order to be non-cancelable.
     *
     * @return self
     */
    public function setNonCancellationReason($non_cancellation_reason)
    {
        if (is_null($non_cancellation_reason)) {
            throw new \InvalidArgumentException('non-nullable non_cancellation_reason cannot be null');
        }
        $allowedValues = $this->getNonCancellationReasonAllowableValues();
        if (!in_array($non_cancellation_reason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'non_cancellation_reason', must be one of '%s'",
                    $non_cancellation_reason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['non_cancellation_reason'] = $non_cancellation_reason;

        return $this;
    }

    /**
     * Gets limit_type
     *
     * @return \Grab\GrabfoodApiSdk\Model\CancelOrderLimitType|null
     */
    public function getLimitType()
    {
        return $this->container['limit_type'];
    }

    /**
     * Sets limit_type
     *
     * @param \Grab\GrabfoodApiSdk\Model\CancelOrderLimitType|null $limit_type limit_type
     *
     * @return self
     */
    public function setLimitType($limit_type)
    {
        if (is_null($limit_type)) {
            throw new \InvalidArgumentException('non-nullable limit_type cannot be null');
        }
        $this->container['limit_type'] = $limit_type;

        return $this;
    }

    /**
     * Gets limit_times
     *
     * @return int|null
     */
    public function getLimitTimes()
    {
        return $this->container['limit_times'];
    }

    /**
     * Sets limit_times
     *
     * @param int|null $limit_times The remaining cancellation quota for the merchant. A value is only returned when the nearest remaining cancellation limit is approaching, else it returns 0.
     *
     * @return self
     */
    public function setLimitTimes($limit_times)
    {
        if (is_null($limit_times)) {
            throw new \InvalidArgumentException('non-nullable limit_times cannot be null');
        }
        $this->container['limit_times'] = $limit_times;

        return $this;
    }

    /**
     * Gets cancel_reasons
     *
     * @return \Grab\GrabfoodApiSdk\Model\CancelReason[]|null
     */
    public function getCancelReasons()
    {
        return $this->container['cancel_reasons'];
    }

    /**
     * Sets cancel_reasons
     *
     * @param \Grab\GrabfoodApiSdk\Model\CancelReason[]|null $cancel_reasons An array of cancel order reasons JSON objects.
     *
     * @return self
     */
    public function setCancelReasons($cancel_reasons)
    {
        if (is_null($cancel_reasons)) {
            throw new \InvalidArgumentException('non-nullable cancel_reasons cannot be null');
        }
        $this->container['cancel_reasons'] = $cancel_reasons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


