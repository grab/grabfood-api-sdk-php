<?php
/**
 * SubmitOrderRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Grab\GrabfoodApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Grab\GrabfoodApiSdk\Model;

use \ArrayAccess;
use \Grab\GrabfoodApiSdk\ObjectSerializer;

/**
 * SubmitOrderRequest Class Doc Comment
 *
 * @category Class
 * @description A JSON object containing the order information.
 * @package  Grab\GrabfoodApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubmitOrderRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SubmitOrderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_id' => 'string',
        'short_order_number' => 'string',
        'merchant_id' => 'string',
        'partner_merchant_id' => 'string',
        'payment_type' => 'string',
        'cutlery' => 'bool',
        'order_time' => 'string',
        'submit_time' => '\DateTime',
        'complete_time' => '\DateTime',
        'scheduled_time' => 'string',
        'order_state' => 'string',
        'currency' => '\Grab\GrabfoodApiSdk\Model\Currency',
        'feature_flags' => '\Grab\GrabfoodApiSdk\Model\OrderFeatureFlags',
        'items' => '\Grab\GrabfoodApiSdk\Model\OrderItem[]',
        'campaigns' => '\Grab\GrabfoodApiSdk\Model\OrderCampaign[]',
        'promos' => '\Grab\GrabfoodApiSdk\Model\OrderPromo[]',
        'price' => '\Grab\GrabfoodApiSdk\Model\OrderPrice',
        'dine_in' => '\Grab\GrabfoodApiSdk\Model\DineIn',
        'receiver' => '\Grab\GrabfoodApiSdk\Model\Receiver',
        'order_ready_estimation' => '\Grab\GrabfoodApiSdk\Model\OrderReadyEstimation',
        'membership_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_id' => null,
        'short_order_number' => null,
        'merchant_id' => null,
        'partner_merchant_id' => null,
        'payment_type' => null,
        'cutlery' => null,
        'order_time' => null,
        'submit_time' => 'date-time',
        'complete_time' => 'date-time',
        'scheduled_time' => null,
        'order_state' => null,
        'currency' => null,
        'feature_flags' => null,
        'items' => null,
        'campaigns' => null,
        'promos' => null,
        'price' => null,
        'dine_in' => null,
        'receiver' => null,
        'order_ready_estimation' => null,
        'membership_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_id' => false,
        'short_order_number' => false,
        'merchant_id' => false,
        'partner_merchant_id' => false,
        'payment_type' => false,
        'cutlery' => false,
        'order_time' => false,
        'submit_time' => false,
        'complete_time' => false,
        'scheduled_time' => false,
        'order_state' => false,
        'currency' => false,
        'feature_flags' => false,
        'items' => false,
        'campaigns' => true,
        'promos' => true,
        'price' => false,
        'dine_in' => true,
        'receiver' => true,
        'order_ready_estimation' => false,
        'membership_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'orderID',
        'short_order_number' => 'shortOrderNumber',
        'merchant_id' => 'merchantID',
        'partner_merchant_id' => 'partnerMerchantID',
        'payment_type' => 'paymentType',
        'cutlery' => 'cutlery',
        'order_time' => 'orderTime',
        'submit_time' => 'submitTime',
        'complete_time' => 'completeTime',
        'scheduled_time' => 'scheduledTime',
        'order_state' => 'orderState',
        'currency' => 'currency',
        'feature_flags' => 'featureFlags',
        'items' => 'items',
        'campaigns' => 'campaigns',
        'promos' => 'promos',
        'price' => 'price',
        'dine_in' => 'dineIn',
        'receiver' => 'receiver',
        'order_ready_estimation' => 'orderReadyEstimation',
        'membership_id' => 'membershipID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'short_order_number' => 'setShortOrderNumber',
        'merchant_id' => 'setMerchantId',
        'partner_merchant_id' => 'setPartnerMerchantId',
        'payment_type' => 'setPaymentType',
        'cutlery' => 'setCutlery',
        'order_time' => 'setOrderTime',
        'submit_time' => 'setSubmitTime',
        'complete_time' => 'setCompleteTime',
        'scheduled_time' => 'setScheduledTime',
        'order_state' => 'setOrderState',
        'currency' => 'setCurrency',
        'feature_flags' => 'setFeatureFlags',
        'items' => 'setItems',
        'campaigns' => 'setCampaigns',
        'promos' => 'setPromos',
        'price' => 'setPrice',
        'dine_in' => 'setDineIn',
        'receiver' => 'setReceiver',
        'order_ready_estimation' => 'setOrderReadyEstimation',
        'membership_id' => 'setMembershipId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'short_order_number' => 'getShortOrderNumber',
        'merchant_id' => 'getMerchantId',
        'partner_merchant_id' => 'getPartnerMerchantId',
        'payment_type' => 'getPaymentType',
        'cutlery' => 'getCutlery',
        'order_time' => 'getOrderTime',
        'submit_time' => 'getSubmitTime',
        'complete_time' => 'getCompleteTime',
        'scheduled_time' => 'getScheduledTime',
        'order_state' => 'getOrderState',
        'currency' => 'getCurrency',
        'feature_flags' => 'getFeatureFlags',
        'items' => 'getItems',
        'campaigns' => 'getCampaigns',
        'promos' => 'getPromos',
        'price' => 'getPrice',
        'dine_in' => 'getDineIn',
        'receiver' => 'getReceiver',
        'order_ready_estimation' => 'getOrderReadyEstimation',
        'membership_id' => 'getMembershipId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_TYPE_CASH = 'CASH';
    public const PAYMENT_TYPE_CASHLESS = 'CASHLESS';
    public const PAYMENT_TYPE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_CASH,
            self::PAYMENT_TYPE_CASHLESS,
            self::PAYMENT_TYPE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('short_order_number', $data ?? [], null);
        $this->setIfExists('merchant_id', $data ?? [], null);
        $this->setIfExists('partner_merchant_id', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('cutlery', $data ?? [], null);
        $this->setIfExists('order_time', $data ?? [], null);
        $this->setIfExists('submit_time', $data ?? [], null);
        $this->setIfExists('complete_time', $data ?? [], null);
        $this->setIfExists('scheduled_time', $data ?? [], null);
        $this->setIfExists('order_state', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('feature_flags', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('campaigns', $data ?? [], null);
        $this->setIfExists('promos', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('dine_in', $data ?? [], null);
        $this->setIfExists('receiver', $data ?? [], null);
        $this->setIfExists('order_ready_estimation', $data ?? [], null);
        $this->setIfExists('membership_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['short_order_number'] === null) {
            $invalidProperties[] = "'short_order_number' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['payment_type'] === null) {
            $invalidProperties[] = "'payment_type' can't be null";
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['payment_type']) && !in_array($this->container['payment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_type', must be one of '%s'",
                $this->container['payment_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['cutlery'] === null) {
            $invalidProperties[] = "'cutlery' can't be null";
        }
        if ($this->container['order_time'] === null) {
            $invalidProperties[] = "'order_time' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['feature_flags'] === null) {
            $invalidProperties[] = "'feature_flags' can't be null";
        }
        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The order's ID that is returned from GrabFood. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What's-the-difference-between-orderID-and-shortOrderNumber).
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets short_order_number
     *
     * @return string
     */
    public function getShortOrderNumber()
    {
        return $this->container['short_order_number'];
    }

    /**
     * Sets short_order_number
     *
     * @param string $short_order_number The GrabFood short order number. This is unique for each merchant per day. Refer to FAQs for more details about [orderID and shortOrderNumber](#section/Order/What's-the-difference-between-orderID-and-shortOrderNumber).
     *
     * @return self
     */
    public function setShortOrderNumber($short_order_number)
    {
        if (is_null($short_order_number)) {
            throw new \InvalidArgumentException('non-nullable short_order_number cannot be null');
        }
        $this->container['short_order_number'] = $short_order_number;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id The merchant's ID that is in GrabFood's database.
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        if (is_null($merchant_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_id cannot be null');
        }
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets partner_merchant_id
     *
     * @return string|null
     */
    public function getPartnerMerchantId()
    {
        return $this->container['partner_merchant_id'];
    }

    /**
     * Sets partner_merchant_id
     *
     * @param string|null $partner_merchant_id The merchant's ID that is on the partner's database.
     *
     * @return self
     */
    public function setPartnerMerchantId($partner_merchant_id)
    {
        if (is_null($partner_merchant_id)) {
            throw new \InvalidArgumentException('non-nullable partner_merchant_id cannot be null');
        }
        $this->container['partner_merchant_id'] = $partner_merchant_id;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type The payment method used. Refer to FAQs for more details about [paymentType](#section/Order/Does-the-paymentType-affect-partners).
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!in_array($payment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_type', must be one of '%s'",
                    $payment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets cutlery
     *
     * @return bool
     */
    public function getCutlery()
    {
        return $this->container['cutlery'];
    }

    /**
     * Sets cutlery
     *
     * @param bool $cutlery The boolean value to indicate whether cutlery are needed or not. Refer to FAQs for more details about [cutlery](#section/Order/What-do-the-true-or-false-values-mean-for-cutlery).
     *
     * @return self
     */
    public function setCutlery($cutlery)
    {
        if (is_null($cutlery)) {
            throw new \InvalidArgumentException('non-nullable cutlery cannot be null');
        }
        $this->container['cutlery'] = $cutlery;

        return $this;
    }

    /**
     * Gets order_time
     *
     * @return string
     */
    public function getOrderTime()
    {
        return $this->container['order_time'];
    }

    /**
     * Sets order_time
     *
     * @param string $order_time The UTC time that a consumer places the order, based on ISO_8601/RFC3339.
     *
     * @return self
     */
    public function setOrderTime($order_time)
    {
        if (is_null($order_time)) {
            throw new \InvalidArgumentException('non-nullable order_time cannot be null');
        }
        $this->container['order_time'] = $order_time;

        return $this;
    }

    /**
     * Gets submit_time
     *
     * @return \DateTime|null
     */
    public function getSubmitTime()
    {
        return $this->container['submit_time'];
    }

    /**
     * Sets submit_time
     *
     * @param \DateTime|null $submit_time The order submit time, based on ISO_8601/RFC3339. `null` in Submit Order payload. Only present in the [List Orders](#tag/list-order) response.
     *
     * @return self
     */
    public function setSubmitTime($submit_time)
    {
        if (is_null($submit_time)) {
            throw new \InvalidArgumentException('non-nullable submit_time cannot be null');
        }
        $this->container['submit_time'] = $submit_time;

        return $this;
    }

    /**
     * Gets complete_time
     *
     * @return \DateTime|null
     */
    public function getCompleteTime()
    {
        return $this->container['complete_time'];
    }

    /**
     * Sets complete_time
     *
     * @param \DateTime|null $complete_time The order complete time, based on ISO_8601/RFC3339. `null` in Submit Order payload. Only present in the [List Orders](#tag/list-order) response.
     *
     * @return self
     */
    public function setCompleteTime($complete_time)
    {
        if (is_null($complete_time)) {
            throw new \InvalidArgumentException('non-nullable complete_time cannot be null');
        }
        $this->container['complete_time'] = $complete_time;

        return $this;
    }

    /**
     * Gets scheduled_time
     *
     * @return string|null
     */
    public function getScheduledTime()
    {
        return $this->container['scheduled_time'];
    }

    /**
     * Sets scheduled_time
     *
     * @param string|null $scheduled_time The order scheduled time, based on ISO_8601/RFC3339. Empty for non-scheduled orders.
     *
     * @return self
     */
    public function setScheduledTime($scheduled_time)
    {
        if (is_null($scheduled_time)) {
            throw new \InvalidArgumentException('non-nullable scheduled_time cannot be null');
        }
        $this->container['scheduled_time'] = $scheduled_time;

        return $this;
    }

    /**
     * Gets order_state
     *
     * @return string|null
     */
    public function getOrderState()
    {
        return $this->container['order_state'];
    }

    /**
     * Sets order_state
     *
     * @param string|null $order_state The state of the order. Empty in Submit Order payload. Only present in the [List Orders](#tag/list-order) response. Refer to [Order States](#section/Order-states).
     *
     * @return self
     */
    public function setOrderState($order_state)
    {
        if (is_null($order_state)) {
            throw new \InvalidArgumentException('non-nullable order_state cannot be null');
        }
        $this->container['order_state'] = $order_state;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Grab\GrabfoodApiSdk\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Grab\GrabfoodApiSdk\Model\Currency $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets feature_flags
     *
     * @return \Grab\GrabfoodApiSdk\Model\OrderFeatureFlags
     */
    public function getFeatureFlags()
    {
        return $this->container['feature_flags'];
    }

    /**
     * Sets feature_flags
     *
     * @param \Grab\GrabfoodApiSdk\Model\OrderFeatureFlags $feature_flags feature_flags
     *
     * @return self
     */
    public function setFeatureFlags($feature_flags)
    {
        if (is_null($feature_flags)) {
            throw new \InvalidArgumentException('non-nullable feature_flags cannot be null');
        }
        $this->container['feature_flags'] = $feature_flags;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Grab\GrabfoodApiSdk\Model\OrderItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Grab\GrabfoodApiSdk\Model\OrderItem[] $items The ordered items in an array of JSON Object.
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets campaigns
     *
     * @return \Grab\GrabfoodApiSdk\Model\OrderCampaign[]|null
     */
    public function getCampaigns()
    {
        return $this->container['campaigns'];
    }

    /**
     * Sets campaigns
     *
     * @param \Grab\GrabfoodApiSdk\Model\OrderCampaign[]|null $campaigns The campaigns that are applicable for the order. `null` when there is no campaign applied. Only campaigns that are funded by merchants will be sent.
     *
     * @return self
     */
    public function setCampaigns($campaigns)
    {
        if (is_null($campaigns)) {
            array_push($this->openAPINullablesSetToNull, 'campaigns');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaigns', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['campaigns'] = $campaigns;

        return $this;
    }

    /**
     * Gets promos
     *
     * @return \Grab\GrabfoodApiSdk\Model\OrderPromo[]|null
     */
    public function getPromos()
    {
        return $this->container['promos'];
    }

    /**
     * Sets promos
     *
     * @param \Grab\GrabfoodApiSdk\Model\OrderPromo[]|null $promos An array of promotion objects. `null` when there is no promo code applied. Only promotions that are funded by merchants will be sent.
     *
     * @return self
     */
    public function setPromos($promos)
    {
        if (is_null($promos)) {
            array_push($this->openAPINullablesSetToNull, 'promos');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('promos', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['promos'] = $promos;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Grab\GrabfoodApiSdk\Model\OrderPrice
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Grab\GrabfoodApiSdk\Model\OrderPrice $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets dine_in
     *
     * @return \Grab\GrabfoodApiSdk\Model\DineIn|null
     */
    public function getDineIn()
    {
        return $this->container['dine_in'];
    }

    /**
     * Sets dine_in
     *
     * @param \Grab\GrabfoodApiSdk\Model\DineIn|null $dine_in dine_in
     *
     * @return self
     */
    public function setDineIn($dine_in)
    {
        if (is_null($dine_in)) {
            array_push($this->openAPINullablesSetToNull, 'dine_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('dine_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['dine_in'] = $dine_in;

        return $this;
    }

    /**
     * Gets receiver
     *
     * @return \Grab\GrabfoodApiSdk\Model\Receiver|null
     */
    public function getReceiver()
    {
        return $this->container['receiver'];
    }

    /**
     * Sets receiver
     *
     * @param \Grab\GrabfoodApiSdk\Model\Receiver|null $receiver receiver
     *
     * @return self
     */
    public function setReceiver($receiver)
    {
        if (is_null($receiver)) {
            array_push($this->openAPINullablesSetToNull, 'receiver');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receiver', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['receiver'] = $receiver;

        return $this;
    }

    /**
     * Gets order_ready_estimation
     *
     * @return \Grab\GrabfoodApiSdk\Model\OrderReadyEstimation|null
     */
    public function getOrderReadyEstimation()
    {
        return $this->container['order_ready_estimation'];
    }

    /**
     * Sets order_ready_estimation
     *
     * @param \Grab\GrabfoodApiSdk\Model\OrderReadyEstimation|null $order_ready_estimation order_ready_estimation
     *
     * @return self
     */
    public function setOrderReadyEstimation($order_ready_estimation)
    {
        if (is_null($order_ready_estimation)) {
            throw new \InvalidArgumentException('non-nullable order_ready_estimation cannot be null');
        }
        $this->container['order_ready_estimation'] = $order_ready_estimation;

        return $this;
    }

    /**
     * Gets membership_id
     *
     * @return string|null
     */
    public function getMembershipId()
    {
        return $this->container['membership_id'];
    }

    /**
     * Sets membership_id
     *
     * @param string|null $membership_id Membership ID for loyalty project. Only present for loyalty program partners. Empty if not applicable.
     *
     * @return self
     */
    public function setMembershipId($membership_id)
    {
        if (is_null($membership_id)) {
            throw new \InvalidArgumentException('non-nullable membership_id cannot be null');
        }
        $this->container['membership_id'] = $membership_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


