<?php
/**
 * Address
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Grab\GrabfoodApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

// Copyright 2024 Grabtaxi Holdings PTE LTE (GRAB), All rights reserved.
// Use of this source code is governed by an MIT-style license that can be found in the LICENSE file

/*
GrabFood

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Grab\GrabfoodApiSdk\Model;

use \ArrayAccess;
use \Grab\GrabfoodApiSdk\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @description A JSON object containing the receiverâ€™s location information.
 * @package  Grab\GrabfoodApiSdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Address implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'unit_number' => 'string',
        'delivery_instruction' => 'string',
        'poi_source' => 'string',
        'poi_id' => 'string',
        'address' => 'string',
        'postcode' => 'string',
        'coordinates' => '\Grab\GrabfoodApiSdk\Model\Coordinates'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'unit_number' => null,
        'delivery_instruction' => null,
        'poi_source' => null,
        'poi_id' => null,
        'address' => null,
        'postcode' => null,
        'coordinates' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'unit_number' => false,
        'delivery_instruction' => false,
        'poi_source' => false,
        'poi_id' => false,
        'address' => false,
        'postcode' => false,
        'coordinates' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unit_number' => 'unitNumber',
        'delivery_instruction' => 'deliveryInstruction',
        'poi_source' => 'poiSource',
        'poi_id' => 'poiID',
        'address' => 'address',
        'postcode' => 'postcode',
        'coordinates' => 'coordinates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unit_number' => 'setUnitNumber',
        'delivery_instruction' => 'setDeliveryInstruction',
        'poi_source' => 'setPoiSource',
        'poi_id' => 'setPoiId',
        'address' => 'setAddress',
        'postcode' => 'setPostcode',
        'coordinates' => 'setCoordinates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unit_number' => 'getUnitNumber',
        'delivery_instruction' => 'getDeliveryInstruction',
        'poi_source' => 'getPoiSource',
        'poi_id' => 'getPoiId',
        'address' => 'getAddress',
        'postcode' => 'getPostcode',
        'coordinates' => 'getCoordinates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const POI_SOURCE_GRAB = 'GRAB';
    public const POI_SOURCE_GOOGLE = 'GOOGLE';
    public const POI_SOURCE_UNKNOWN_DEFAULT_OPEN_API = 'unknown_default_open_api';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPoiSourceAllowableValues()
    {
        return [
            self::POI_SOURCE_GRAB,
            self::POI_SOURCE_GOOGLE,
            self::POI_SOURCE_UNKNOWN_DEFAULT_OPEN_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('unit_number', $data ?? [], null);
        $this->setIfExists('delivery_instruction', $data ?? [], null);
        $this->setIfExists('poi_source', $data ?? [], null);
        $this->setIfExists('poi_id', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('postcode', $data ?? [], null);
        $this->setIfExists('coordinates', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPoiSourceAllowableValues();
        if (!is_null($this->container['poi_source']) && !in_array($this->container['poi_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'poi_source', must be one of '%s'",
                $this->container['poi_source'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unit_number
     *
     * @return string|null
     */
    public function getUnitNumber()
    {
        return $this->container['unit_number'];
    }

    /**
     * Sets unit_number
     *
     * @param string|null $unit_number The delivery address' unit number.
     *
     * @return self
     */
    public function setUnitNumber($unit_number)
    {
        if (is_null($unit_number)) {
            throw new \InvalidArgumentException('non-nullable unit_number cannot be null');
        }
        $this->container['unit_number'] = $unit_number;

        return $this;
    }

    /**
     * Gets delivery_instruction
     *
     * @return string|null
     */
    public function getDeliveryInstruction()
    {
        return $this->container['delivery_instruction'];
    }

    /**
     * Sets delivery_instruction
     *
     * @param string|null $delivery_instruction Instructions for the delivery.
     *
     * @return self
     */
    public function setDeliveryInstruction($delivery_instruction)
    {
        if (is_null($delivery_instruction)) {
            throw new \InvalidArgumentException('non-nullable delivery_instruction cannot be null');
        }
        $this->container['delivery_instruction'] = $delivery_instruction;

        return $this;
    }

    /**
     * Gets poi_source
     *
     * @return string|null
     */
    public function getPoiSource()
    {
        return $this->container['poi_source'];
    }

    /**
     * Sets poi_source
     *
     * @param string|null $poi_source POI source
     *
     * @return self
     */
    public function setPoiSource($poi_source)
    {
        if (is_null($poi_source)) {
            throw new \InvalidArgumentException('non-nullable poi_source cannot be null');
        }
        $allowedValues = $this->getPoiSourceAllowableValues();
        if (!in_array($poi_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'poi_source', must be one of '%s'",
                    $poi_source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['poi_source'] = $poi_source;

        return $this;
    }

    /**
     * Gets poi_id
     *
     * @return string|null
     */
    public function getPoiId()
    {
        return $this->container['poi_id'];
    }

    /**
     * Sets poi_id
     *
     * @param string|null $poi_id POI ID, empty when poiSource is GRAB.
     *
     * @return self
     */
    public function setPoiId($poi_id)
    {
        if (is_null($poi_id)) {
            throw new \InvalidArgumentException('non-nullable poi_id cannot be null');
        }
        $this->container['poi_id'] = $poi_id;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address The delivery address containing street name, city, postal code, and country. Has value only when poiSource is `GRAB`.
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string|null
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string|null $postcode The postcode of the delivery address. Has value only when poiSource is `GRAB`.
     *
     * @return self
     */
    public function setPostcode($postcode)
    {
        if (is_null($postcode)) {
            throw new \InvalidArgumentException('non-nullable postcode cannot be null');
        }
        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets coordinates
     *
     * @return \Grab\GrabfoodApiSdk\Model\Coordinates|null
     */
    public function getCoordinates()
    {
        return $this->container['coordinates'];
    }

    /**
     * Sets coordinates
     *
     * @param \Grab\GrabfoodApiSdk\Model\Coordinates|null $coordinates coordinates
     *
     * @return self
     */
    public function setCoordinates($coordinates)
    {
        if (is_null($coordinates)) {
            throw new \InvalidArgumentException('non-nullable coordinates cannot be null');
        }
        $this->container['coordinates'] = $coordinates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


